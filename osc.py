from ginv.monom import Monom
from ginv.poly import Poly
from ginv.gb import GB
from ginv.ginv import *

def init(variables, order = Monom.TOPdeglex):
  Monom.init(variables)
  Monom.variables = variables.copy()
  Monom.zero = Monom(0 for _ in Monom.variables)
  Monom.cmp = order 
  Poly.cmp = order
  for i in range(len(Monom.variables)):
    p = Poly()
    p.append([Monom(0 if l != i else 1 for l in range(len(Monom.variables))), 1])
    globals()[Monom.variables[i]] = p


'''
n = 5
Basis [x4^4 + 4*y4^2 - 4, x4^3*y4 - 27/20*x4^3 - 27/200*x4^2*T - 1/320*x4*T^2 - 1/40000*T^3, x4^3*T - 40*y4 + 40, x4^2*y4^2 - 7/20*x4^2*y4 + 1/32*x4*T + 1/4000*T^2, x4^2*T^2 + 32000*y4^3 + 20800*y4^2 - 12800*y3 - 24000*y4 - 16000, x4*y4^3 + 13/20*x4*y4^2 - 7/20*x4*y4 - 5/16*x4 - 1/400*T, x4*T^3 - 3840000*y4^3 - 2816000*y4^2 + 1600000*y3 + 3056000*y4 + 2000000, y4^4 + 33/20*y4^3 + 3/10*y4^2 - 4/5*y3 - 117/80*y4 - 11/16, T^4 + 307200000*y4^3 + 238080000*y4^2 - 130880000*y3 - 248640000*y4 - 165760000, x4*y3 + x4*y4 + 1/2*x4, y3^2 - y4^2 + 1/2*y3 - 1/2*y4, y3*y4 + y4^2 - y3 - 1/2*y4 - 1/2, y3*T - 10*x4 - 1/2*T, y4*T + 10*x4 + T, x1 + x4, x2 + x4 + 1/20*T, x3 - x4 - 1/20*T, y1 - y4, y2 - y3]
[
    x1 == 1/10*T*(y1 + 1),
    -x1 + x2 == 1/10*T*(y1 + y2),
    -x2 + x3 == 1/10*T*(y2 + y3),
    -x3 + x4 == 1/10*T*(y3 + y4),
    -x4 == 1/10*T*(y4 + 1),
    y1 - 1 == -1/40*T*x1^3,
    -y1 + y2 == -1/40*T*(x1 + x2)^3,
    -y2 + y3 == -1/40*T*(x2 + x3)^3,
    -y3 + y4 == -1/40*T*(x3 + x4)^3,
    -y4 + 1 == -1/40*T*x4^3
]
[
    10*x1 - T*y1 - T,
    -10*x1 + 10*x2 - T*y1 - T*y2,
    -10*x2 + 10*x3 - T*y2 - T*y3,
    -10*x3 + 10*x4 - T*y3 - T*y4,
    -10*x4 - T*y4 - T,
    40*y1 - 40 + T*x1**3,
    -40*y1 + 40*y2 + T*x1**3 + T*x2**3 + 3*T*x1**2*x2 + 3*T*x1*x2**2,
    -40*y2 + 40*y3 + T*x2**3 + T*x3**3 + 3*T*x2**2*x3 + 3*T*x2*x3**2,
    -40*y3 + 40*y4 + T*x3**3 + T*x4**3 + 3*T*x3**2*x4 + 3*T*x3*x4**2,
    -40*y4 + 40 + T*x4**3
]
basis1 = [
    y2*-1 + y3,
    y1*-1 + y4,
    x3*-20 + x4*20 + T,
    x2*20 + x4*20 + T,
    x1*-1 + x4*-1,
    y4*T*-1 + x4*-10 + T*-1,
    y3*T*-2 + x4*20 + T,
    y3*y4*-2 + y4^2*-2 + y3*2 + y4 + 1,
    y3^2*2 + y4^2*-2 + y3 + y4*-1,
    x4*y3*2 + x4*y4*2 + x4,
    T^4 + y4^3*307200000 + y4^2*238080000 + y3*-130880000 + y4*-248640000 + -165760000,
    x4*T^3*-1 + y4^3*3840000 + y4^2*2816000 + y3*-1600000 + y4*-3056000 + -2000000,
    x4^2*T^2 + y4^3*32000 + y4^2*20800 + y3*-12800 + y4*-24000 + -16000,
    x4^3*T + y4*-40 + 40,
    y4^4*-80 + y4^3*-132 + y4^2*-24 + y3*64 + y4*117 + 55,
    x4*y4^3*400 + x4*y4^2*260 + x4*y4*-140 + x4*-125 + T*-1,
    x4^2*y4^2*-4000 + x4^2*y4*1400 + x4*T*-125 + T^2*-1,
    x4^3*y4*40000 + x4^3*-54000 + x4^2*T*-5400 + x4*T^2*-125 + T^3*-1,
    x4^4 + y4^2*4 + -4
]
'''

'''
n = 7
 x1 == 1/14*T*(y1 + 1),
 -x1 + x2 == 1/14*T*(y1 + y2),
 -x2 + x3 == 1/14*T*(y2 + y3),
 -x3 + x4 == 1/14*T*(y3 + y4),
 -x4 + x5 == 1/14*T*(y4 + y5),
 -x5 + x6 == 1/14*T*(y5 + y6),
 -x6 == 1/14*T*(y6 + 1),
 y1 - 1 == -1/56*T*x1^3,
 -y1 + y2 == -1/56*T*(x1 + x2)^3,
 -y2 + y3 == -1/56*T*(x2 + x3)^3,
 -y3 + y4 == -1/56*T*(x3 + x4)^3,
 -y4 + y5 == -1/56*T*(x4 + x5)^3,
 -y5 + y6 == -1/56*T*(x5 + x6)^3,
 -y6 + 1 == -1/56*T*x6^3

[
    14*x1 - T*y1 - T,
    -14*x1 + 14*x2 - T*y1 - T*y2,
    -14*x2 + 14*x3 - T*y2 - T*y3,
    -14*x3 + 14*x4 - T*y3 - T*y4,
    -14*x4 + 14*x5 - T*y4 - T*y5,
    -14*x5 + 14*x6 - T*y5 - T*y6,
    -14*x6 - T*y6 - T,
    56*y1 + T*x1^3 - 56,
    -56*y1 + 56*y2 + T*x1^3 + 3*T*x1^2*x2 + 3*T*x1*x2^2 + T*x2^3,
    -56*y2 + 56*y3 + T*x2^3 + 3*T*x2^2*x3 + 3*T*x2*x2^3 + T*x3^3,
    -56*y3 + 56*y4 + T*x3^3 + 3*T*x3^2*x4 + 3*T*x3*x2^4 + T*x4^3,
    -56*y4 + 56*y5 + T*x4^3 + 3*T*x4^2*x5 + 3*T*x4*x2^5 + T*x5^3,
    -56*y5 + 56*y6 + T*x5^3 + 3*T*x5^2*x6 + 3*T*x5*x2^6 + T*x6^3,
    -56*y6 + T*x6^3 + 56
]


'''

'''
n = 10
[
    x1 == 1/20*T*(y1 + 1),
    -x1 + x2 == 1/20*T*(y1 + y2),
    -x2 + x3 == 1/20*T*(y2 + y3),
    -x3 + x4 == 1/20*T*(y3 + y4),
    -x4 + x5 == 1/20*T*(y4 + y5),
    -x5 + x6 == 1/20*T*(y5 + y6),
    -x6 + x7 == 1/20*T*(y6 + y7),
    -x7 + x8 == 1/20*T*(y7 + y8),
    -x8 + x9 == 1/20*T*(y8 + y9),
    -x9 == 1/20*T*(y9 + 1),
    y1 - 1 == -1/80*T*x1^3,
    -y1 + y2 == -1/80*T*(x1 + x2)^3,
    -y2 + y3 == -1/80*T*(x2 + x3)^3,
    -y3 + y4 == -1/80*T*(x3 + x4)^3,
    -y4 + y5 == -1/80*T*(x4 + x5)^3,
    -y5 + y6 == -1/80*T*(x5 + x6)^3,
    -y6 + y7 == -1/80*T*(x6 + x7)^3,
    -y7 + y8 == -1/80*T*(x7 + x8)^3,
    -y8 + y9 == -1/80*T*(x8 + x9)^3,
    -y9 + 1 == -1/80*T*x9^3
]

[
    80*x1 - 4*T*y1 - 4,
    -80*x1 + 80*x2 - 4*T*y1 - 4*T*y2,
    -80*x2 + 80*x3 - 4*T*y2 - 4*T*y3,
    -80*x3 + 80*x4 - 4*T*y3 - 4*T*y4,
    -80*x4 + 80*x5 - 4*T*y4 - 4*T*y5,
    -80*x5 + 80*x6 - 4*T*y5 - 4*T*y6,
    -80*x6 + 80*x7 - 4*T*y6 - 4*T*y7,
    -80*x7 + 80*x8 - 4*T*y7 - 4*T*y8,
    -80*x8 + 80*x9 - 4*T*y8 - 4*T*y9,
    -80*x9 - 4*T*y9 - 4*T*1,
    T*x1**3 + 80*y1 - 80,
    x2**3*T + x3**3*T + 3*x2**2*x3*T + 3*x2*x3**2*T - 80*y2 + 80*y3,
    x3**3*T + x4**3*T + 3*x3**2*x4*T + 3*x3*x4**2*T - 80*y3 + 80*y4,
    x4**3*T + x5**3*T + 3*x4**2*x5*T + 3*x4*x5**2*T - 80*y4 + 80*y5,
    x5**3*T + x6**3*T + 3*x5**2*x6*T + 3*x5*x6**2*T - 80*y5 + 80*y6,
    x6**3*T + x7**3*T + 3*x6**2*x7*T + 3*x6*x7**2*T - 80*y6 + 80*y7,
    x7**3*T + x8**3*T + 3*x7**2*x8*T + 3*x7*x8**2*T - 80*y7 + 80*y8,
    x8**3*T + x9**3*T + 3*x8**2*x9*T + 3*x8*x9**2*T - 80*y8 + 80*y9,
    T*x9**3 - 80*y9 + 80
]
'''

def get_osc_5():
   return [
        10*x1 - T*y1 - T,
        -10*x1 + 10*x2 - T*y1 - T*y2,
        -10*x2 + 10*x3 - T*y2 - T*y3,
        -10*x3 + 10*x4 - T*y3 - T*y4,
        -10*x4 - T*y4 - T,
        40*y1 - 40 + T*x1**3,
        -40*y1 + 40*y2 + T*x1**3 + T*x2**3 + 3*T*x1**2*x2 + 3*T*x1*x2**2,
        -40*y2 + 40*y3 + T*x2**3 + T*x3**3 + 3*T*x2**2*x3 + 3*T*x2*x3**2,
        -40*y3 + 40*y4 + T*x3**3 + T*x4**3 + 3*T*x3**2*x4 + 3*T*x3*x4**2,
        -40*y4 + 40 + T*x4**3        
    ]

def get_osc_7():
   return [
        14*x1 - T*y1 - T,
        -14*x1 + 14*x2 - T*y1 - T*y2,
        -14*x2 + 14*x3 - T*y2 - T*y3,
        -14*x3 + 14*x4 - T*y3 - T*y4,
        -14*x4 + 14*x5 - T*y4 - T*y5,
        -14*x5 + 14*x6 - T*y5 - T*y6,
        -14*x6 - T*y6 - T,
        56*y1 + T*x1**3 - 56,
        -56*y1 + 56*y2 + T*x1**3 + 3*T*x1**2*x2 + 3*T*x1*x2**2 + T*x2**3,
        -56*y2 + 56*y3 + T*x2**3 + 3*T*x2**2*x3 + 3*T*x2*x2**3 + T*x3**3,
        -56*y3 + 56*y4 + T*x3**3 + 3*T*x3**2*x4 + 3*T*x3*x2**4 + T*x4**3,
        -56*y4 + 56*y5 + T*x4**3 + 3*T*x4**2*x5 + 3*T*x4*x2**5 + T*x5**3,
        -56*y5 + 56*y6 + T*x5**3 + 3*T*x5**2*x6 + 3*T*x5*x2**6 + T*x6**3,
        -56*y6 + T*x6**3 + 56
    ]

def ginv_basis():
    init(['x1', 'x2', 'x3', 'x4', 'y1', 'y2', 'y3', 'y4', 'T'])
    G = GB()
    G.algorithm2(get_osc_5())

    # вывод базиса
    print('Grobner Basis:')
    print(G)
    print(", ".join(str(g.lm()) for g in G)) # вывод старших степеней
    print("crit1 =", G.crit1, "crit2 =", G.crit2)
    print("time %.2f" % G.time) # вывод времени вычислений

def ginv_basis7():
    init(['x1', 'x2', 'x3', 'x4', 'x5', 'x6', 'y1', 'y2', 'y3', 'y4', 'y5', 'y6', 'T'])
    G = GB()
    G.algorithm2(get_osc_7())

    # вывод базиса
    print('Grobner Basis for osc7:')
    print(G)
    print(", ".join(str(g.lm()) for g in G)) # вывод старших степеней
    print("crit1 =", G.crit1, "crit2 =", G.crit2)
    print("time %.2f" % G.time) # вывод времени вычислений


if __name__ == '__main__':
   ginv_basis7()



'''
    80*x1 - 4*T*y1 - 4,
    -80*x1 + 80*x2 - 4*T*y1 - 4*T*y2,
    -80*x2 + 80*x3 - 4*T*y2 - 4*T*y3,
    -80*x3 + 80*x4 - 4*T*y3 - 4*T*y4,
    -80*x4 + 80*x5 - 4*T*y4 - 4*T*y5,
    -80*x5 + 80*x6 - 4*T*y5 - 4*T*y6,
    -80*x6 + 80*x7 - 4*T*y6 - 4*T*y7,
    -80*x7 + 80*x8 - 4*T*y7 - 4*T*y8,
    -80*x8 + 80*x9 - 4*T*y8 - 4*T*y9,
    -80*x9 - 4*T*y9 - 4*T*1,
    T*x1**3 + 80*y1 - 80,
    x2**3*T + x3**3*T + 3*x2**2*x3*T + 3*x2*x3**2*T - 80*y2 + 80*y3,
    x3**3*T + x4**3*T + 3*x3**2*x4*T + 3*x3*x4**2*T - 80*y3 + 80*y4,
    x4**3*T + x5**3*T + 3*x4**2*x5*T + 3*x4*x5**2*T - 80*y4 + 80*y5,
    x5**3*T + x6**3*T + 3*x5**2*x6*T + 3*x5*x6**2*T - 80*y5 + 80*y6,
    x6**3*T + x7**3*T + 3*x6**2*x7*T + 3*x6*x7**2*T - 80*y6 + 80*y7,
    x7**3*T + x8**3*T + 3*x7**2*x8*T + 3*x7*x8**2*T - 80*y7 + 80*y8,
    x8**3*T + x9**3*T + 3*x8**2*x9*T + 3*x8*x9**2*T - 80*y8 + 80*y9,
    T*x9**3 - 80*y9 + 80
    '''